-- Haskell Playground 1.0

let b = parseBoard "b,b,b,b/b,b,b/b,b,b,b/,,/w,w,w,w/w,w,w/w,w,w,w"

splitChars "asdasdda"

let test = createPoint 0 


show b 

getBoardCoordinates

length (b !! 0)

length getBoardCoordinates

-- getNotEmptyCoordinatesTest
map (\p -> fieldAtCoordinate b p) (getNotEmptyCoordinates b)

-- getCoordinatesForColorTEst

map (\p -> fieldAtCoordinate b p) (getCoordinatesForColor b Black)

map (\p -> fieldAtCoordinate b p) (getCoordinatesForColor b White)


findPos 3 [1,2..4]

let p = Point {x = 4 , y = 5}

show p 

addToPoint p 4 5

let test = filter (\p -> (length (emptyReachablePoints b p)) > 0) (getCoordinatesForColor b White)

map (\p -> fieldAtCoordinate b p) test


let possibleMoves = foldr  (++) [] (map (\w -> map (\x -> Move {from = w, to = x}) (emptyReachablePoints b w)) (getCoordinatesForColor b White))

show possibleMoves


listMoves "b,b,b,b/b,b,b/b,b,b,b/,,/w,w,w,w/w,w,w/w,w,w,w w"