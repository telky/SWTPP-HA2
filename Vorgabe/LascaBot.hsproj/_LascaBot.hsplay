-- Haskell Playground 1.0

let b = parseBoard "b,b,b,b/b,b,b/,,wb,b/b,wb,/w,w,w,w/,,w/w,w,w,w"

splitChars "asdasdda"

let test = createPoint 0 


show b 

getBoardCoordinates

length (b !! 0)

length getBoardCoordinates

-- getNotEmptyCoordinatesTest
map (\p -> fieldAtCoordinate b p) (getNotEmptyCoordinates b)

-- getCoordinatesForColorTEst

map (\p -> fieldAtCoordinate b p) (getCoordinatesForColor b Black)

map (\p -> fieldAtCoordinate b p) (getCoordinatesForColor b White)


findPos 3 [1,2..4]

let p = Point {x = 4 , y = 5}

show p 

addToPoint p 4 5

let test = filter (\p -> (length (emptyReachablePoints b p)) > 0) (getCoordinatesForColor b White)

map (\p -> fieldAtCoordinate b p) test


let possibleMoves = foldr  (++) [] (map (\w -> map (\x -> Move {from = w, to = x, isStrike = False}) (emptyReachablePoints b w)) (getCoordinatesForColor b White))



listMoves "b,b,b,b/b,b,b/b,b,b,b/,,/w,w,w,w/w,w,w/w,w,w,w w"

map (\p -> (p, (notEmptyReachablePointWithColor b p (oppColor White))))  (getCoordinatesForColor b White)


-- "b4-d2"

let n = parseBoard "b,b,b,b/b,b,b/,,wb,b/b,wb,/w,w,w,w/,,w/w,w,w,w"


map (\(o, dest) -> (o, filter (\d -> empty (fieldAtCoordinate n (nextPoint o d)) ) dest))(strikeCandidatesForColor n Black)


getCoordinatesForColor n Black

fieldAtCoordinate n Point{x = 2, y = 3}

map (\(o, dest) -> (o, (map (\d -> (nextPoint o d)) dest ))) (filter (\(o, dest) -> length dest > 0) (map (\(o, dest) -> (o, filter (\d -> empty (fieldAtCoordinate n (nextPoint o d)) ) dest))(strikeCandidatesForColor n Black)))

fieldAtCoordinate
(map (\(o, dest) -> nextPoint o (dest !! 0))(strikeCandidatesForColor n Black)) !! 0 


strikeCandidatesForColor n Black

listMoves "b,b,b,b/b,b,b/,,wb,b/b,wb,/w,w,w,w/,,w/w,w,w,w b" 
getMove ",,,/,,/,,,/b,,/,wbb,,/,,/,,, b" 


listMoves "b,b,,b/,,b/,Wbbbb,wb,/w,w,w/,wb,,/ww,,w/,,Bw,w b"
getMove "b,b,,b/,,b/,Wbbbb,wb,/w,w,w/,wb,,/ww,,w/,,Bw,w b"